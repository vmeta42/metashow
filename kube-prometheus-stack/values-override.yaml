kubeTargetVersionOverride: "1.20.5"
defaultRules:
  create: false

global:
  rbac:
    create: true
    pspEnabled: false

alertmanager:
  enabled: false
grafana:
  enabled: true
  defaultDashboardsEnabled: true
  defaultDashboardsTimezone: cst
  adminPassword: prom-operator
  plugins: ["http://thanos-minio.kube-admin:9000/public/alexanderzobnin-zabbix-app-4.2.4.zip;custom-plugins"]
  downloadDashboardsImage:
    repository: harbor.dev.21vianet.com/library/curl
    tag: 7.73.0
  persistence:
    type: pvc
    enabled: true
    storageClassName: csi-rbd-sc
    accessModes:
      - ReadWriteOnce
    size: 10Gi
  initChownData:
    enabled: true
    image:
      repository: harbor.dev.21vianet.com/library/bitnami-shell
      tag: "10-debian-10-r278"
      pullPolicy: IfNotPresent
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
      - name: 'ceph'
        orgId: 1
        folder: 'Ceph'
        type: file
        disableDeletion: false
        editable: true
        options:
          path: /var/lib/grafana/dashboards/ceph
      - name: 'zabbix'
        orgId: 1
        folder: 'Zabbix'
        type: file
        disableDeletion: false
        editable: true
        options:
          path: /var/lib/grafana/dashboards/zabbix

  dashboards:
    zabbix:
      zabbix-server:
        file: dashboards/zabbix-server.json
      zabbix-system-status:
        file: dashboards/zabbix-system-status.json

  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: traefik
      traefik.ingress.kubernetes.io/buffering: |
        maxRequestBodyBytes = 0
      traefik.ingress.kubernetes.io/router.entrypoints: websecure
      traefik.ingress.kubernetes.io/router.tls: "true"
    hosts:
      - monitor.dev.21vianet.com
    path: /
    tls:
    - secretName: monitor-general-tls
      hosts:
      - monitor.dev.21vianet.com
  image:
    repository: harbor.dev.21vianet.com/library/grafana
    tag: 8.3.2
  sidecar:
    image:
      repository: harbor.dev.21vianet.com/library/k8s-sidecar
      tag: 1.14.2
    dashboards:
      enabled: true
      label: grafana_dashboard
      multicluster:
        global:
          enabled: true
        etcd:
          enabled: false
      provider:
        allowUiUpdates: false
        folder: Kubernetes
    datasources:
      enabled: true
      defaultDatasourceEnabled: true
      defaultDatasourceScrapeInterval: 30s
      createPrometheusReplicasDatasources: false
      label: grafana_datasource
  zabbix:
    password: "test"


  ## Configure additional grafana datasources (passed through tpl)
  ## ref: http://docs.grafana.org/administration/provisioning/#datasources
  additionalDataSources:
  - name: k8s
    access: proxy
    basicAuth: false
    editable: false
    jsonData:
        tlsSkipVerify: true
    orgId: 1
    type: prometheus
    url: http://thanos-query-frontend:9090
    version: 1
  - name: Zabbix
    access: proxy
    orgId: 1
    basicAuth: false
    type: alexanderzobnin-zabbix-datasource
    typeLogoUrl: ''
    url: http://172.22.50.228/api_jsonrpc.php
    password: ''
    user: ''
    database: ''
    basicAuthUser: ''
    basicAuthPassword: ''
    withCredentials: false
    isDefault: false
    jsonData:
      cacheTTL: ''
      dbConnectionEnable: false
      disableDataAlignment: false
      trends: true
      trendsFrom: ''
      trendsRange: ''
      username: admin
      password: "{{.Values.grafana.zabbix.password }}"
    secureJsonFields:
      password: true
    version: 6
    readOnly: false
  - name: Zabbix-5.4
    access: proxy
    orgId: 1
    basicAuth: false
    type: alexanderzobnin-zabbix-datasource
    typeLogoUrl: ''
    url: http://172.22.50.138/api_jsonrpc.php
    password: ''
    user: ''
    database: ''
    basicAuthUser: ''
    basicAuthPassword: ''
    withCredentials: false
    isDefault: false
    jsonData:
      cacheTTL: ''
      disableDataAlignment: false
      trends: true
      trendsFrom: ''
      trendsRange: ''
      username: admin
      password: "{{.Values.grafana.zabbix.password }}"
    secureJsonFields:
      password: true
    version: 4
    readOnly: false


kubeApiServer:
  enabled: false
kubelet:
  enabled: false
kubeControllerManager:
  enabled: false
coreDns:
  enabled: false
kubeEtcd:
  enabled: false
kubeScheduler:
  enabled: false
kubeProxy:
  enabled: false
kubeStateMetrics:
  enabled: false
nodeExporter:
  enabled: false
prometheusOperator:
  enabled: true
  tls:
    enabled: true
    tlsMinVersion: VersionTLS13
    internalPort: 10250
  admissionWebhooks:
    failurePolicy: Fail
    enabled: true
    patch:
      enabled: true
      image:
        repository: harbor.dev.21vianet.com/library/kube-webhook-certgen
        tag: v1.0
        sha: ""
        pullPolicy: IfNotPresent

  namespaces: 
    releaseNamespace: true
    additional:
    - kube-system
  kubeletService:
    enabled: false
  resources: 
    limits:
      cpu: 4
      memory: 4096Mi
    requests:
      cpu: 2
      memory: 2048Mi
  image:
    repository: harbor.dev.21vianet.com/library/prometheus-operator
    tag: v0.52.1
    prometheusDefaultBaseImage: harbor.dev.21vianet.com/library/prometheus
    alertmanagerDefaultBaseImage: harbor.dev.21vianet.com/library/alertmanager
  prometheusConfigReloader:
    image:
      repository: harbor.dev.21vianet.com/library/prometheus-config-reloader
      tag: v0.52.1
  thanosImage:
    repository: harbor.dev.21vianet.com/library/thanos
    tag: v0.23.1

prometheus:
  enabled: true
  thanosService:
    enabled: true
    type: ClusterIP
    portName: grpc
    port: 10901
    targetPort: "grpc"
    httpPortName: http
    httpPort: 10902
    targetHttpPort: "http"
    clusterIP: "None"
  service:
    port: 9090
    targetPort: 9090
    type: ClusterIP
  servicePerReplica:
    enabled: false
  podDisruptionBudget:
    enabled: false
  ingress:
    enabled: false
    ingressClassName: traefik
    annotations:
      traefik.ingress.kubernetes.io/buffering: |
        maxRequestBodyBytes = 0
      traefik.ingress.kubernetes.io/router.entrypoints: websecure
      traefik.ingress.kubernetes.io/router.tls: "true"
    hosts:
      - prometheus.dev.21vianet.com
    paths: 
      - /
    pathType: Prefix
    tls: 
      - secretName: monitor-general-tls
        hosts:
          - prometheus.dev.21vianet.com
  additionalConfigs:
    dev-config: ""
    prod-config: ""
  prometheusSpec:
    disableCompaction: false
    apiserverConfig: {}
    scrapeInterval: "30s"
    scrapeTimeout: "15s"
    enableAdminAPI: false
    web: {}
    image:
      repository: harbor.dev.21vianet.com/library/prometheus
      tag: v2.31.1
    alertingEndpoints: []
    # - name: ""
    #   namespace: ""
    #   port: http
    #   scheme: http
    #   pathPrefix: ""
    #   tlsConfig: {}
    #   bearerTokenFile: ""
    #   apiVersion: v2

    externalUrl: "https://prometheus.dev.21vianet.com"
    retention: 365d
    retentionSize: "200GB"
    walCompression: false
    paused: false
    replicas: 1
    shards: 1
    logLevel: info
    logFormat: logfmt
    routePrefix: /
    resources:
      requests:
        memory: 4096Mi
        cpu: 4
      limits:
        memory: 4096Mi
        cpu: 4
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: csi-rbd-sc
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 300Gi
    configMaps: []
    additionalScrapeConfigs: {}
    ## If additional scrape configurations are already deployed in a single secret file you can use this section.
    ## Expected values are the secret name and key
    ## Cannot be used with additionalScrapeConfigs
    additionalScrapeConfigsSecret: {}
      # enabled: false
      # name:
      # key:

    additionalAlertManagerConfigs: []
    # - consul_sd_configs:
    #   - server: consul.dev.test:8500
    #     scheme: http
    #     datacenter: dev
    #     tag_separator: ','
    #     services:
    #       - metrics-prometheus-alertmanager
    additionalAlertManagerConfigsSecret: {}
      # name:
      # key:
    additionalAlertRelabelConfigs: []
    # - separator: ;
    #   regex: prometheus_replica
    #   replacement: $1
    #   action: labeldrop
    ## Thanos configuration allows configuring various aspects of a Prometheus server in a Thanos environment.
    ## This section is experimental, it may change significantly without deprecation notice in any release.
    ## This is experimental and may change significantly without backward compatibility in any release.
    ## ref: https://github.com/prometheus-operator/prometheus-operator/blob/master/Documentation/api.md#thanosspec
    ##
    thanos:
      resources:
        requests:
          memory: 4096Mi
          cpu: 4
        limits:
          memory: 4096Mi
          cpu: 4